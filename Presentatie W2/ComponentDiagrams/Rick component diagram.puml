@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

title Component Diagram – Transportmodule DemoApp (Strategy Pattern incl. opslag)

' === Actor ===
Person(user, "Gebruiker", "Plant vervoer tussen locaties via Triptop")

' === Bounded System: 1 Spring Boot applicatie ===
System_Boundary(transportSystem, "Transportmodule - DemoApp") {

  ' ===== Controller Layer =====
  Component(controller, "TransportController", "Spring Boot REST Controller", "Verwerkt aanvragen voor transportplanning")
  Component(trainCtrl, "TreinController", "Spring Boot REST Controller", "Verwerkt aanvragen voor treinreizen")
  Component(flightCtrl, "VluchtController", "Spring Boot REST Controller", "Verwerkt aanvragen voor vluchten")

  ' ===== Service Layer =====
  Component(plannerService, "TransportPlanner", "Component", "Gebruikt strategie om vervoersopties te zoeken")

  ' ===== Repository + Database =====
  Component(repository, "TransportRepository", "Component", "Slaat reis- en boekingsinformatie op")
  ContainerDb(database, "TriptopDB", "Relationale Database", "Bevat routes, reisstatus en boekingsdata")

  ' ===== Configuration Layer =====
  Component(config, "AppConfig", "Spring @Configuration", "Selecteert en injecteert juiste TransportOption-strategie")

  ' ===== Strategieën & Interface =====
  Component(strategy, "TransportOption", "Interface", "Bepaalt gedrag van alle vervoersstrategieën")

  Component(trein, "TreinTransport", "Component", "Strategie voor reizen met de trein (NS API)")
  Component(vlucht, "VluchtTransport", "Component", "Strategie voor reizen met het vliegtuig (Google Flights API)")
  Component(auto, "AutoTransport", "Component", "Strategie voor reizen met de auto (nog niet geïmplementeerd)")
  Component(boot, "BootTransport", "Component", "Strategie voor reizen met de boot (nog niet geïmplementeerd)")

  ' ===== API-integratie Services =====
  Component(treinService, "TreinService", "Component", "Verwerkt communicatie met de NS API")
  Component(vluchtService, "VluchtService", "Component", "Verwerkt communicatie met de Google Flights API")

  ' ===== Model =====
  Component(resultaat, "TransportOptionResultaat", "Model", "Bevat provider, tijden, beschikbaarheid etc.")
}

' ===== Externe systemen =====
Container_Ext(nsapi, "NS API", "Extern systeem", "Levert Nederlandse treinreisinformatie")
Container_Ext(googleflightsapi, "Google Flights API", "Extern systeem", "Levert vluchtreisinformatie via RapidAPI")

' ===== Gebruiker naar controller =====
Rel(user, controller, "doet GET-aanvraag voor transportplanning")
Rel(user, trainCtrl, "doet GET-aanvraag voor treininfo")
Rel(user, flightCtrl, "doet GET-aanvraag voor vluchtinfo")

' ===== Controller naar planner/service laag =====
Rel(controller, plannerService, "roept search(from, to) aan")
Rel(plannerService, strategy, "gebruikt strategie via interface")

' ===== Strategie implementaties =====
Rel(trein, strategy, "implementeert")
Rel(vlucht, strategy, "implementeert")
Rel(auto, strategy, "implementeert (in toekomst)")
Rel(boot, strategy, "implementeert (in toekomst)")

' ===== Config injecteert strategieën en planner =====
Rel(config, plannerService, "maakt TransportPlanner aan")
Rel(config, trein, "injecteert wanneer 'train'")
Rel(config, vlucht, "injecteert wanneer 'flight'")

' ===== Strategie gebruikt service voor API-aanroepen =====
Rel(trein, treinService, "gebruikt NS API via")
Rel(vlucht, vluchtService, "gebruikt Google Flights API via")

' ===== Services communiceren met externe APIs =====
Rel(treinService, nsapi, "doet HTTP-aanroep naar")
Rel(vluchtService, googleflightsapi, "doet HTTP-aanroep naar")

' ===== Opslaglaag =====
Rel(plannerService, repository, "slaat reisinformatie op in")
Rel(repository, database, "leest/schrijft reisdata")

' ===== Resultaatmodel stroom =====
Rel(strategy, resultaat, "retourneert lijst van")
Rel(plannerService, resultaat, "stuurt resultaat naar controller")
Rel(controller, resultaat, "stuurt JSON-response terug")

' === Legenda ===
' Voeg een blok toe onderaan het diagram
SHOW_LEGEND()
@enduml
